generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  email            String      @unique
  password         String
  name             String
  role             Role
  isVerified       Boolean
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  Client           Client?
  Freelancer       Freelancer?
  receivedMessages Message[]   @relation("MessageReceiver")
  sentMessages     Message[]   @relation("MessageSender")
}

model Otp {
  id          String    @id @default(cuid())
  email       String
  otp         String
  type        OtpType
  status      OtpStatus @default(PENDING)
  userId      String?
  attempts    Int       @default(0)
  metadata    Json?
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  verifiedAt  DateTime?
  lastAttempt DateTime?

  @@index([email, type, status])
  @@index([expiresAt])
}

model Client {
  id          String     @id @default(uuid())
  userId      String     @unique
  fullName    String
  companyName String?
  bio         String?
  website     String?
  location    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  contracts   Contract[]
  jobs        Job[]
}

model Job {
  id          String     @id @default(uuid())
  clientId    String
  title       String
  description String
  budget      Float
  category    String
  status      JobStatus  @default(OPEN)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  contract    Contract?
  client      Client     @relation(fields: [clientId], references: [id])
  proposals   Proposal[]

  // Indexes for browse jobs performance
  @@index([status, createdAt(sort: Desc)])
  @@index([category, status])
  @@index([budget, status])
  @@index([status, budget, createdAt(sort: Desc)])
  @@index([category, budget, status])
}

model Contract {
  id           String         @id @default(uuid())
  clientId     String
  freelancerId String
  jobId        String         @unique
  status       ContractStatus @default(PENDING)
  startDate    DateTime
  endDate      DateTime?
  client       Client         @relation(fields: [clientId], references: [id])
  freelancer   Freelancer     @relation(fields: [freelancerId], references: [id])
  job          Job            @relation(fields: [jobId], references: [id])
  review       Review?
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime @default(now())
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
}

model Freelancer {
  id              String          @id @default(uuid())
  userId          String          @unique
  fullName        String
  hourlyRate      Float?
  experienceLevel ExperienceLevel
  bio             String?
  profilePicture  String?
  isAvailable     Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  contracts       Contract[]
  user            User            @relation(fields: [userId], references: [id])
  portfolioLinks  PortfolioLink[]
  proposals       Proposal[]
  reviews         Review[]
  skills          Skill[]         @relation("FreelancerSkills")
}

model Skill {
  id          String       @id @default(uuid())
  name        String
  freelancers Freelancer[] @relation("FreelancerSkills")
}

model PortfolioLink {
  id           String     @id @default(uuid())
  title        String
  description  String?
  imageUrls    String[]
  githubUrl    String?
  liveUrl      String?
  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
}

model Proposal {
  id           String     @id @default(uuid())
  freelancerId String
  jobId        String
  coverLetter  String
  proposedRate Float
  createdAt    DateTime   @default(now())
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
  job          Job        @relation(fields: [jobId], references: [id])
  status       ProposalStatus @default(PENDING)
}

enum ProposalStatus {
  PENDING
  INTERVIEWING
  ACCEPTED
  DECLINED
}

model Review {
  id           String     @id @default(uuid())
  contractId   String     @unique
  rating       Int
  feedback     String?
  createdAt    DateTime   @default(now())
  freelancerId String
  contract     Contract   @relation(fields: [contractId], references: [id])
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
}

enum Role {
  CLIENT
  FREELANCER
  ADMIN
}

enum OtpType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
  TWO_FACTOR_AUTH
  ACCOUNT_VERIFICATION
}

enum OtpStatus {
  PENDING
  VERIFIED
  EXPIRED
  USED
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELED
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
}
