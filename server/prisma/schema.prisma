generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  name       String
  role       Role
  isVerified Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Client     Client?
  Freelancer Freelancer?

  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
}

enum Role {
  CLIENT
  FREELANCER
  ADMIN
}

model Otp {
  id          String    @id @default(cuid())
  email       String
  otp         String
  type        OtpType
  status      OtpStatus @default(PENDING)
  userId      String?
  attempts    Int       @default(0)
  metadata    Json?
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  verifiedAt  DateTime?
  lastAttempt DateTime?

  @@index([email, type, status])
  @@index([expiresAt])
}

enum OtpType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
  TWO_FACTOR_AUTH
  ACCOUNT_VERIFICATION
}

enum OtpStatus {
  PENDING
  VERIFIED
  EXPIRED
  USED
}


model Client {
  id          String   @id @default(uuid())
  userId      String   @unique
  fullName    String
  companyName String?
  bio         String?
  website     String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  jobs      Job[]
  contracts Contract[]
}

model Job {
  id          String    @id @default(uuid())
  clientId    String
  title       String
  description String
  budget      Float
  category    String
  status      JobStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  client    Client     @relation(fields: [clientId], references: [id])
  proposals Proposal[]
  contract  Contract?
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model Contract {
  id           String         @id @default(uuid())
  clientId     String
  freelancerId String
  jobId        String         @unique
  status       ContractStatus @default(PENDING)
  startDate    DateTime
  endDate      DateTime?

  review Review?

  client     Client     @relation(fields: [clientId], references: [id])
  job        Job        @relation(fields: [jobId], references: [id])
  freelancer Freelancer @relation(fields: [freelancerId], references: [id])
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELED
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id])
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])
}

model Freelancer {
  id              String          @id @default(uuid())
  userId          String          @unique
  hourlyRate      Float?
  experienceLevel ExperienceLevel
  bio             String?

  user           User            @relation(fields: [userId], references: [id])
  skills         Skill[]         @relation("FreelancerSkills")
  portfolioLinks PortfolioLink[]
  proposals      Proposal[]
  contracts      Contract[]
  reviews        Review[]
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

model Skill {
  id          String       @id @default(uuid())
  name        String
  freelancers Freelancer[] @relation("FreelancerSkills")
}

model PortfolioLink {
  id           String  @id @default(uuid())
  freelancerId String
  url          String
  description  String?

  freelancer Freelancer @relation(fields: [freelancerId], references: [id])
}

model Proposal {
  id           String   @id @default(uuid())
  freelancerId String
  jobId        String
  coverLetter  String
  proposedRate Float
  createdAt    DateTime @default(now())

  freelancer Freelancer @relation(fields: [freelancerId], references: [id])
  job        Job        @relation(fields: [jobId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  contractId String   @unique
  rating     Int // 1 to 5
  feedback   String?
  createdAt  DateTime @default(now())

  contract Contract @relation(fields: [contractId], references: [id])

  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
}
